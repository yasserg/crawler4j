/**
 *
 *
 * Copyright 2018 Diffblue Limited
 *
 * Diffblue Limited licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package edu.uci.ics.crawler4j.tests.url;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import com.diffblue.deeptestutils.Reflector;

public class UrlResolverTest {

    @Rule public ExpectedException thrown = ExpectedException.none();

    /* testedClasses: UrlResolver */

    /*
    * Test generated by Diffblue Deeptest.
    * This test case covers:
    *  - edu/uci/ics/crawler4j/url/UrlResolver.java:56: loop: 1 iterations
    *  - iteration 1
    *     - conditional line 57 branch to line 57
    *     - conditional line 57 branch to line 56
    */

    @Test
    public void indexOfInputNotNullNotNullPositivePositiveOutputNegative()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        String s = "!!!!!!!!!";
        char searchChar = ' ';
        int beginIndex = 7;
        int endIndex = 8;

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
        Method m = c.getDeclaredMethod("indexOf", Reflector.forName("java.lang.String"),
                                      Reflector.forName("char"), Reflector.forName("int"),
                                      Reflector.forName("int"));
        m.setAccessible(true);
        int retval = (int)m.invoke(null, s, searchChar, beginIndex, endIndex);

        // Assert result
        Assert.assertEquals(-1, retval);
    }

    /*
    * Test generated by Diffblue Deeptest.This test covers `int indexOf(String,
    * int, int)' block 2 (line 56)
    * This test covers `int indexOf(String, int, int)' block 3 (line 56)
    * This test covers `int indexOf(String, int, int)' block 5 (line 57)
    *
    */

    @Test
    public void indexOfInputNotNullNotNullZeroPositiveOutputStringIndexOutOfBoundsException()
        throws Throwable {

        // Arrange
        String s = "";
        char searchChar = '\u0000';
        int beginIndex = 0;
        int endIndex = 1;

        // Act
        thrown.expect(StringIndexOutOfBoundsException.class);
        try {
            Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
            Method m = c.getDeclaredMethod("indexOf", Reflector.forName("java.lang.String"),
                                          Reflector.forName("char"), Reflector.forName("int"),
                                          Reflector.forName("int"));
            m.setAccessible(true);
            m.invoke(null, s, searchChar, beginIndex, endIndex);
        } catch (InvocationTargetException ex) {
            throw ex.getCause();
        }

        // Method is not expected to return due to exception thrown
    }

    /*
    * Test generated by Diffblue Deeptest.This test covers `int indexOf(String,
    * int, int)' block 2 (line 56)
    * This test covers `int indexOf(String, int, int)' block 3 (line 56)
    * This test covers `int indexOf(String, int, int)' block 5 (line 57)
    * This test covers `int indexOf(String, int, int)' block 6 (line 57)
    * This test covers `int indexOf(String, int, int)' block 8 (line 58)
    *
    */

    @Test
    public void indexOfInputNotNullNotNullZeroPositiveOutputZero()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        String s = "!@!";
        char searchChar = '!';
        int beginIndex = 0;
        int endIndex = 3;

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
        Method m = c.getDeclaredMethod("indexOf", Reflector.forName("java.lang.String"),
                                      Reflector.forName("char"), Reflector.forName("int"),
                                      Reflector.forName("int"));
        m.setAccessible(true);
        int retval = (int)m.invoke(null, s, searchChar, beginIndex, endIndex);

        // Assert result
        Assert.assertEquals(0, retval);
    }

    /*
    * Test generated by Diffblue Deeptest.
    * This test case covers:
    *
    */

    @Test
    public void indexOfInputNotNullNotNullZeroZeroOutputNegative()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        String s = "";
        char searchChar = '\u0000';
        int beginIndex = 0;
        int endIndex = 0;

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
        Method m = c.getDeclaredMethod("indexOf", Reflector.forName("java.lang.String"),
                                      Reflector.forName("char"), Reflector.forName("int"),
                                      Reflector.forName("int"));
        m.setAccessible(true);
        int retval = (int)m.invoke(null, s, searchChar, beginIndex, endIndex);

        // Assert result
        Assert.assertEquals(-1, retval);
    }

    /*
    * Test generated by Diffblue Deeptest.
    * This test case covers:
    *  - conditional line 219 branch to line 220
    */

    @Test
    public void isValidSchemeInputNotNullOutputFalse()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        String scheme = "";

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
        Method m = c.getDeclaredMethod("isValidScheme", Reflector.forName("java.lang.String"));
        m.setAccessible(true);
        boolean retval = (boolean)m.invoke(null, scheme);

        // Assert result
        Assert.assertEquals(false, retval);
    }

    /*
    * Test generated by Diffblue Deeptest.
    * This test case covers:
    *  - conditional line 219 branch to line 222
    *  - conditional line 222 branch to line 222
    *  - conditional line 223 branch to line 223
    *  - conditional line 223 branch to line 224
    */

    @Test
    public void isValidSchemeInputNotNullOutputFalse2()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        String scheme = "!";

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
        Method m = c.getDeclaredMethod("isValidScheme", Reflector.forName("java.lang.String"));
        m.setAccessible(true);
        boolean retval = (boolean)m.invoke(null, scheme);

        // Assert result
        Assert.assertEquals(false, retval);
    }

    /*
    * Test generated by Diffblue Deeptest.This test covers `boolean
    * isValidScheme(String)' block 2 (line 218)
    * This test covers `boolean isValidScheme(String)' block 3 (line 218)
    * This test covers `boolean isValidScheme(String)' block 4 (line 219)
    * This test covers `boolean isValidScheme(String)' block 5 (line 222)
    * This test covers `boolean isValidScheme(String)' block 7 (line 222)
    * This test covers `boolean isValidScheme(String)' block 8 (line 222)
    * This test covers `boolean isValidScheme(String)' block 9 (line 223)
    * This test covers `boolean isValidScheme(String)' block 10 (line 223)
    * This test covers `boolean isValidScheme(String)' block 11 (line 226)
    * This test covers `boolean isValidScheme(String)' block 13 (line 226)
    * This test covers `boolean isValidScheme(String)' block 14 (line 226)
    * This test covers `boolean isValidScheme(String)' block 16 (line 227)
    * This test covers `boolean isValidScheme(String)' block 17 (line 227)
    * This test covers `boolean isValidScheme(String)' block 18 (line 228)
    * This test covers `boolean isValidScheme(String)' block 19 (line 228)
    * This test covers `boolean isValidScheme(String)' block 21 (line 228)
    * This test covers `boolean isValidScheme(String)' block 22 (line 228)
    * This test covers `boolean isValidScheme(String)' block 23 (line 228)
    * This test covers `boolean isValidScheme(String)' block 24 (line 229)
    *
    */

    @Test
    public void isValidSchemeInputNotNullOutputFalse3()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        String scheme = "A`AAAAA";

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
        Method m = c.getDeclaredMethod("isValidScheme", Reflector.forName("java.lang.String"));
        m.setAccessible(true);
        boolean retval = (boolean)m.invoke(null, scheme);

        // Assert result
        Assert.assertEquals(false, retval);
    }

    /*
    * Test generated by Diffblue Deeptest.This test covers `boolean
    * isValidScheme(String)' block 2 (line 218)
    * This test covers `boolean isValidScheme(String)' block 3 (line 218)
    * This test covers `boolean isValidScheme(String)' block 4 (line 219)
    * This test covers `boolean isValidScheme(String)' block 5 (line 222)
    * This test covers `boolean isValidScheme(String)' block 7 (line 222)
    * This test covers `boolean isValidScheme(String)' block 8 (line 222)
    * This test covers `boolean isValidScheme(String)' block 9 (line 223)
    * This test covers `boolean isValidScheme(String)' block 10 (line 223)
    * This test covers `boolean isValidScheme(String)' block 11 (line 226)
    * This test covers `boolean isValidScheme(String)' block 13 (line 226)
    * This test covers `boolean isValidScheme(String)' block 14 (line 226)
    * This test covers `boolean isValidScheme(String)' block 16 (line 227)
    * This test covers `boolean isValidScheme(String)' block 17 (line 227)
    * This test covers `boolean isValidScheme(String)' block 18 (line 228)
    * This test covers `boolean isValidScheme(String)' block 19 (line 228)
    * This test covers `boolean isValidScheme(String)' block 21 (line 228)
    * This test covers `boolean isValidScheme(String)' block 22 (line 228)
    * This test covers `boolean isValidScheme(String)' block 23 (line 228)
    * This test covers `boolean isValidScheme(String)' block 24 (line 229)
    * This test covers `boolean isValidScheme(String)' block 25 (line 226)
    *
    */

    @Test
    public void isValidSchemeInputNotNullOutputFalse4()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        String scheme = "A.!!!!!";

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
        Method m = c.getDeclaredMethod("isValidScheme", Reflector.forName("java.lang.String"));
        m.setAccessible(true);
        boolean retval = (boolean)m.invoke(null, scheme);

        // Assert result
        Assert.assertEquals(false, retval);
    }

    /*
    * Test generated by Diffblue Deeptest.This test covers `boolean
    * isValidScheme(String)' block 2 (line 218)
    * This test covers `boolean isValidScheme(String)' block 3 (line 218)
    * This test covers `boolean isValidScheme(String)' block 4 (line 219)
    * This test covers `boolean isValidScheme(String)' block 5 (line 222)
    * This test covers `boolean isValidScheme(String)' block 7 (line 222)
    * This test covers `boolean isValidScheme(String)' block 8 (line 222)
    * This test covers `boolean isValidScheme(String)' block 9 (line 223)
    * This test covers `boolean isValidScheme(String)' block 10 (line 223)
    * This test covers `boolean isValidScheme(String)' block 11 (line 226)
    * This test covers `boolean isValidScheme(String)' block 13 (line 226)
    * This test covers `boolean isValidScheme(String)' block 14 (line 226)
    * This test covers `boolean isValidScheme(String)' block 16 (line 227)
    * This test covers `boolean isValidScheme(String)' block 17 (line 227)
    * This test covers `boolean isValidScheme(String)' block 18 (line 228)
    * This test covers `boolean isValidScheme(String)' block 19 (line 228)
    * This test covers `boolean isValidScheme(String)' block 20 (line 226)
    * This test covers `boolean isValidScheme(String)' block 21 (line 228)
    * This test covers `boolean isValidScheme(String)' block 22 (line 228)
    * This test covers `boolean isValidScheme(String)' block 23 (line 228)
    * This test covers `boolean isValidScheme(String)' block 24 (line 229)
    * This test covers `boolean isValidScheme(String)' block 25 (line 226)
    *
    */

    @Test
    public void isValidSchemeInputNotNullOutputFalse5()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        String scheme = "A0!!!!!";

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
        Method m = c.getDeclaredMethod("isValidScheme", Reflector.forName("java.lang.String"));
        m.setAccessible(true);
        boolean retval = (boolean)m.invoke(null, scheme);

        // Assert result
        Assert.assertEquals(false, retval);
    }

    /*
    * Test generated by Diffblue Deeptest.
    * This test case covers:
    *  - conditional line 219 branch to line 222
    *  - conditional line 222 branch to line 222
    *  - conditional line 223 branch to line 223
    *  - conditional line 223 branch to line 226
    *  - edu/uci/ics/crawler4j/url/UrlResolver.java:226: loop: 1 iterations
    *  - iteration 1
    *     - conditional line 227 branch to line 227
    *     - conditional line 228 branch to line 228
    *     - conditional line 228 branch to line 226
    */

    @Test
    public void isValidSchemeInputNotNullOutputTrue()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        String scheme = "A+";

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
        Method m = c.getDeclaredMethod("isValidScheme", Reflector.forName("java.lang.String"));
        m.setAccessible(true);
        boolean retval = (boolean)m.invoke(null, scheme);

        // Assert result
        Assert.assertEquals(true, retval);
    }

    /*
    * Test generated by Diffblue Deeptest.
    * This test case covers:
    *  - conditional line 101 branch to line 101
    *  - conditional line 103 branch to line 104
    *  - conditional line 104 branch to line 104
    *  - conditional line 115 branch to line 115
    *  - conditional line 117 branch to line 139
    *  - conditional line 139 branch to line 146
    *  - conditional line 158 branch to line 158
    *  - conditional line 160 branch to line 161
    *  - conditional line 161 branch to line 168
    *  - conditional line 168 branch to line 168
    *  - conditional line 179 branch to line 179
    *  - conditional line 181 branch to line 200
    *  - conditional line 200 branch to line 204
    *  - conditional line 204 branch to line 208
    *  - conditional line 208 branch to line 211
    */

    @Test
    public void parseUrlInputNotNullOutputNotNull()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        String spec = "?#";

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
        Method m = c.getDeclaredMethod("parseUrl", Reflector.forName("java.lang.String"));
        m.setAccessible(true);
        Object retval = (Object)m.invoke(null, spec);

        // Assert result
        Assert.assertNotNull(retval);
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "parameters"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "scheme"));
        Assert.assertEquals("", Reflector.getInstanceField(retval, "query"));
        Assert.assertEquals("", Reflector.getInstanceField(retval, "fragment"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "location"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "path"));
    }

    /*
    * Test generated by Diffblue Deeptest.
    * This test case covers:
    *  - conditional line 101 branch to line 101
    *  - conditional line 103 branch to line 104
    *  - conditional line 104 branch to line 104
    *  - conditional line 115 branch to line 115
    *  - conditional line 117 branch to line 139
    *  - conditional line 139 branch to line 146
    *  - conditional line 158 branch to line 158
    *  - conditional line 160 branch to line 179
    *  - conditional line 179 branch to line 179
    *  - conditional line 181 branch to line 182
    *  - conditional line 182 branch to line 189
    *  - conditional line 189 branch to line 189
    *  - conditional line 200 branch to line 204
    *  - conditional line 204 branch to line 208
    *  - conditional line 208 branch to line 211
    */

    @Test
    public void parseUrlInputNotNullOutputNotNull2()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        String spec = ";#N/\"\"\"\"\"";

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
        Method m = c.getDeclaredMethod("parseUrl", Reflector.forName("java.lang.String"));
        m.setAccessible(true);
        Object retval = (Object)m.invoke(null, spec);

        // Assert result
        Assert.assertNotNull(retval);
        Assert.assertEquals("", Reflector.getInstanceField(retval, "parameters"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "scheme"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "query"));
        Assert.assertEquals("N/\"\"\"\"\"", Reflector.getInstanceField(retval, "fragment"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "location"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "path"));
    }

    /*
    * Test generated by Diffblue Deeptest.
    * This test case covers:
    *  - conditional line 101 branch to line 101
    *  - conditional line 103 branch to line 115
    *  - conditional line 115 branch to line 115
    *  - conditional line 117 branch to line 139
    *  - conditional line 139 branch to line 146
    *  - conditional line 158 branch to line 158
    *  - conditional line 160 branch to line 179
    *  - conditional line 179 branch to line 179
    *  - conditional line 181 branch to line 200
    *  - conditional line 200 branch to line 204
    *  - conditional line 204 branch to line 208
    *  - conditional line 208 branch to line 211
    */

    @Test
    public void parseUrlInputNotNullOutputNotNull3()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        String spec = "";

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
        Method m = c.getDeclaredMethod("parseUrl", Reflector.forName("java.lang.String"));
        m.setAccessible(true);
        Object retval = (Object)m.invoke(null, spec);

        // Assert result
        Assert.assertNotNull(retval);
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "parameters"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "scheme"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "query"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "fragment"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "location"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "path"));
    }

    /*
    * Test generated by Diffblue Deeptest.
    * This test case covers:
    *  - conditional line 101 branch to line 101
    *  - conditional line 103 branch to line 104
    *  - conditional line 104 branch to line 104
    *  - conditional line 115 branch to line 115
    *  - conditional line 117 branch to line 139
    *  - conditional line 139 branch to line 146
    *  - conditional line 158 branch to line 158
    *  - conditional line 160 branch to line 179
    *  - conditional line 179 branch to line 179
    *  - conditional line 181 branch to line 200
    *  - conditional line 200 branch to line 204
    *  - conditional line 204 branch to line 205
    *  - conditional line 205 branch to line 205
    *  - conditional line 208 branch to line 211
    */

    @Test
    public void parseUrlInputNotNullOutputNotNull4()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        String spec = "\'#";

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
        Method m = c.getDeclaredMethod("parseUrl", Reflector.forName("java.lang.String"));
        m.setAccessible(true);
        Object retval = (Object)m.invoke(null, spec);

        // Assert result
        Assert.assertNotNull(retval);
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "parameters"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "scheme"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "query"));
        Assert.assertEquals("", Reflector.getInstanceField(retval, "fragment"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "location"));
        Assert.assertEquals("\'", Reflector.getInstanceField(retval, "path"));
    }

    /*
    * Test generated by Diffblue Deeptest.
    * This test case covers:
    *  - conditional line 101 branch to line 101
    *  - conditional line 103 branch to line 115
    *  - conditional line 115 branch to line 115
    *  - conditional line 117 branch to line 118
    *  - conditional line 118 branch to line 118
    *  - conditional line 119 branch to line 119
    *  - conditional line 119 branch to line 120
    *  - conditional line 139 branch to line 146
    *  - conditional line 158 branch to line 158
    *  - conditional line 160 branch to line 161
    *  - conditional line 161 branch to line 168
    *  - conditional line 168 branch to line 168
    *  - conditional line 179 branch to line 179
    *  - conditional line 181 branch to line 200
    *  - conditional line 200 branch to line 204
    *  - conditional line 204 branch to line 208
    *  - conditional line 208 branch to line 211
    */

    @Test
    public void parseUrlInputNotNullOutputNotNull5()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        String spec = "G:?";

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
        Method m = c.getDeclaredMethod("parseUrl", Reflector.forName("java.lang.String"));
        m.setAccessible(true);
        Object retval = (Object)m.invoke(null, spec);

        // Assert result
        Assert.assertNotNull(retval);
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "parameters"));
        Assert.assertEquals("G", Reflector.getInstanceField(retval, "scheme"));
        Assert.assertEquals("", Reflector.getInstanceField(retval, "query"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "fragment"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "location"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "path"));
    }

    /*
    * Test generated by Diffblue Deeptest.
    * This test case covers:
    *  - conditional line 101 branch to line 101
    *  - conditional line 103 branch to line 104
    *  - conditional line 104 branch to line 104
    *  - conditional line 115 branch to line 115
    *  - conditional line 117 branch to line 139
    *  - conditional line 139 branch to line 140
    *  - conditional line 141 branch to line 141
    *  - conditional line 142 branch to line 158
    *  - conditional line 158 branch to line 158
    *  - conditional line 160 branch to line 179
    *  - conditional line 179 branch to line 179
    *  - conditional line 181 branch to line 200
    *  - conditional line 200 branch to line 200
    *  - conditional line 200 branch to line 203
    *  - conditional line 208 branch to line 208
    *  - conditional line 208 branch to line 209
    *  - conditional line 209 branch to line 209
    */

    @Test
    public void parseUrlInputNotNullOutputNotNull6()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        String spec = "//####!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
        Method m = c.getDeclaredMethod("parseUrl", Reflector.forName("java.lang.String"));
        m.setAccessible(true);
        Object retval = (Object)m.invoke(null, spec);

        // Assert result
        Assert.assertNotNull(retval);
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "parameters"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "scheme"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "query"));
        Assert.assertEquals("###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!",
                            Reflector.getInstanceField(retval, "fragment"));
        Assert.assertEquals("", Reflector.getInstanceField(retval, "location"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "path"));
    }

    /*
    * Test generated by Diffblue Deeptest.
    * This test case covers:
    *  - conditional line 101 branch to line 101
    *  - conditional line 103 branch to line 104
    *  - conditional line 104 branch to line 104
    *  - conditional line 115 branch to line 115
    *  - conditional line 117 branch to line 139
    *  - conditional line 139 branch to line 140
    *  - conditional line 141 branch to line 141
    *  - conditional line 142 branch to line 158
    *  - conditional line 158 branch to line 158
    *  - conditional line 160 branch to line 179
    *  - conditional line 179 branch to line 179
    *  - conditional line 181 branch to line 182
    *  - conditional line 182 branch to line 182
    *  - conditional line 182 branch to line 186
    *  - conditional line 189 branch to line 189
    *  - conditional line 200 branch to line 200
    *  - conditional line 200 branch to line 204
    *  - conditional line 204 branch to line 208
    *  - conditional line 208 branch to line 208
    *  - conditional line 208 branch to line 209
    *  - conditional line 209 branch to line 209
    */

    @Test
    public void parseUrlInputNotNullOutputNotNull8()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        String spec = "//;#7\'///////////////////////////////////////////";

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
        Method m = c.getDeclaredMethod("parseUrl", Reflector.forName("java.lang.String"));
        m.setAccessible(true);
        Object retval = (Object)m.invoke(null, spec);

        // Assert result
        Assert.assertNotNull(retval);
        Assert.assertEquals("", Reflector.getInstanceField(retval, "parameters"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "scheme"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "query"));
        Assert.assertEquals("7\'///////////////////////////////////////////",
                            Reflector.getInstanceField(retval, "fragment"));
        Assert.assertEquals("", Reflector.getInstanceField(retval, "location"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "path"));
    }

    /*
    * Test generated by Diffblue Deeptest.
    * This test case covers:
    *  - conditional line 101 branch to line 101
    *  - conditional line 103 branch to line 104
    *  - conditional line 104 branch to line 104
    *  - conditional line 115 branch to line 115
    *  - conditional line 117 branch to line 139
    *  - conditional line 139 branch to line 140
    *  - conditional line 141 branch to line 141
    *  - conditional line 142 branch to line 158
    *  - conditional line 158 branch to line 158
    *  - conditional line 160 branch to line 161
    *  - conditional line 161 branch to line 161
    *  - conditional line 161 branch to line 165
    *  - conditional line 168 branch to line 168
    *  - conditional line 179 branch to line 179
    *  - conditional line 181 branch to line 200
    *  - conditional line 200 branch to line 200
    *  - conditional line 200 branch to line 204
    *  - conditional line 204 branch to line 208
    *  - conditional line 208 branch to line 208
    *  - conditional line 208 branch to line 209
    *  - conditional line 209 branch to line 209
    */

    @Test
    public void parseUrlInputNotNullOutputNotNull9()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        String spec = "//?#;#+++++++++++++++++++++++++++";

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
        Method m = c.getDeclaredMethod("parseUrl", Reflector.forName("java.lang.String"));
        m.setAccessible(true);
        Object retval = (Object)m.invoke(null, spec);

        // Assert result
        Assert.assertNotNull(retval);
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "parameters"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "scheme"));
        Assert.assertEquals("", Reflector.getInstanceField(retval, "query"));
        Assert.assertEquals(";#+++++++++++++++++++++++++++",
                            Reflector.getInstanceField(retval, "fragment"));
        Assert.assertEquals("", Reflector.getInstanceField(retval, "location"));
        Assert.assertEquals(null, Reflector.getInstanceField(retval, "path"));
    }

    /*
    * Test generated by Diffblue Deeptest.
    * This test case covers:
    *  - edu/uci/ics/crawler4j/url/UrlResolver.java:386: loop: 1 iterations
    *  - iteration 1
    *     - conditional line 386 branch to line 386
    */

    @Test
    public void removeLeadingSlashPointsInputNotNullOutputNotNull()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        String path = "/..";

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver");
        Method m =
            c.getDeclaredMethod("removeLeadingSlashPoints", Reflector.forName("java.lang.String"));
        m.setAccessible(true);
        String retval = (String)m.invoke(null, path);

        // Assert result
        Assert.assertEquals("", retval);
    }

    /*
    * Test generated by Diffblue Deeptest.
    * This test case covers:
    *  - conditional line 435 branch to line 436
    *  - conditional line 439 branch to line 440
    *  - conditional line 443 branch to line 444
    *  - conditional line 446 branch to line 450
    *  - conditional line 450 branch to line 451
    *  - conditional line 454 branch to line 458
    */

    @Test
    public void toStringOutputNotNull()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        Object objectUnderTest = Reflector.getInstance("edu.uci.ics.crawler4j.url.UrlResolver$Url");
        Reflector.setField(objectUnderTest, "parameters", null);
        Reflector.setField(objectUnderTest, "scheme", "!!!!");
        Reflector.setField(objectUnderTest, "query", "");
        Reflector.setField(objectUnderTest, "fragment", null);
        Reflector.setField(objectUnderTest, "location", "!!!!!!!!!");
        Reflector.setField(objectUnderTest, "path", "BBBBBBBB");

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver$Url");
        Method m = c.getDeclaredMethod("toString");
        m.setAccessible(true);
        String retval = (String)m.invoke(objectUnderTest);

        // Assert result
        Assert.assertEquals("!!!!://!!!!!!!!!BBBBBBBB?", retval);
    }

    /*
    * Test generated by Diffblue Deeptest.
    * This test case covers:
    *  - conditional line 435 branch to line 436
    *  - conditional line 439 branch to line 440
    *  - conditional line 443 branch to line 444
    *  - conditional line 446 branch to line 447
    *  - conditional line 450 branch to line 451
    *  - conditional line 454 branch to line 458
    */

    @Test
    public void toStringOutputNotNull2()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        Object objectUnderTest = Reflector.getInstance("edu.uci.ics.crawler4j.url.UrlResolver$Url");
        Reflector.setField(objectUnderTest, "parameters", "BBB");
        Reflector.setField(objectUnderTest, "scheme", "!!!!");
        Reflector.setField(objectUnderTest, "query", "");
        Reflector.setField(objectUnderTest, "fragment", null);
        Reflector.setField(objectUnderTest, "location", "!!!!!!!!!");
        Reflector.setField(objectUnderTest, "path", "BBBBBBBB");

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver$Url");
        Method m = c.getDeclaredMethod("toString");
        m.setAccessible(true);
        String retval = (String)m.invoke(objectUnderTest);

        // Assert result
        Assert.assertEquals("!!!!://!!!!!!!!!BBBBBBBB;BBB?", retval);
    }

    /*
    * Test generated by Diffblue Deeptest.
    * This test case covers:
    *  - conditional line 435 branch to line 439
    *  - conditional line 439 branch to line 440
    *  - conditional line 443 branch to line 444
    *  - conditional line 446 branch to line 447
    *  - conditional line 450 branch to line 451
    *  - conditional line 454 branch to line 455
    */

    @Test
    public void toStringOutputNotNull3()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        Object objectUnderTest = Reflector.getInstance("edu.uci.ics.crawler4j.url.UrlResolver$Url");
        Reflector.setField(objectUnderTest, "parameters", "BBBBBBB");
        Reflector.setField(objectUnderTest, "scheme", null);
        Reflector.setField(objectUnderTest, "query", "");
        Reflector.setField(objectUnderTest, "fragment", "\"\"\"\"\"\"\"\"");
        Reflector.setField(objectUnderTest, "location", "!!!!!!!");
        Reflector.setField(objectUnderTest, "path", "BBBBBBB");

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver$Url");
        Method m = c.getDeclaredMethod("toString");
        m.setAccessible(true);
        String retval = (String)m.invoke(objectUnderTest);

        // Assert result
        Assert.assertEquals("//!!!!!!!BBBBBBB;BBBBBBB?#\"\"\"\"\"\"\"\"", retval);
    }

    /*
    * Test generated by Diffblue Deeptest.
    * This test case covers:
    *  - conditional line 435 branch to line 439
    *  - conditional line 439 branch to line 440
    *  - conditional line 443 branch to line 444
    *  - conditional line 446 branch to line 447
    *  - conditional line 450 branch to line 451
    *  - conditional line 454 branch to line 458
    */

    @Test
    public void toStringOutputNotNull4()
        throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

        // Arrange
        Object objectUnderTest = Reflector.getInstance("edu.uci.ics.crawler4j.url.UrlResolver$Url");
        Reflector.setField(objectUnderTest, "parameters", "BBBBBBB");
        Reflector.setField(objectUnderTest, "scheme", null);
        Reflector.setField(objectUnderTest, "query", "");
        Reflector.setField(objectUnderTest, "fragment", null);
        Reflector.setField(objectUnderTest, "location", "!!!!!!!");
        Reflector.setField(objectUnderTest, "path", "BBBBBBB");

        // Act
        Class<?> c = Reflector.forName("edu.uci.ics.crawler4j.url.UrlResolver$Url");
        Method m = c.getDeclaredMethod("toString");
        m.setAccessible(true);
        String retval = (String)m.invoke(objectUnderTest);

        // Assert result
        Assert.assertEquals("//!!!!!!!BBBBBBB;BBBBBBB?", retval);
    }
}
